{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { readFileSync as readFile, writeFileSync as saveFile } from 'fs';\nimport * as readline from 'readline';\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nvar dir = ''\nrl.question(\"Please input the .pyc file you would like to convert (do not include the file extension): \", function(answer) {\n  dir = answer + '.pyc'\n  readPycFile(dir)\n  rl.close();\n});\n\nfunction readPycFile(file) {\n  const orig: string = readFile(file, 'utf8')\n  var lines: Array<string> = orig.replaceAll('function', 'def').replaceAll('constructor(', '__init__(self,').replaceAll('this', 'self').split('\\n')\n  var converted: string = ''\n\n  //console.log(orig)\n\n  String.prototype.isUpperCase = function(): boolean {\n    if (!/^[a-zA-Z]+$/.test(this.toString())) return false;\n    return this.toString() === this.toUpperCase()\n  }\n  String.prototype.isLowerCase = function(): boolean {\n    if (!/^[a-zA-Z]+$/.test(this.toString())) return false;\n    return this.toString() === this.toLowerCase()\n  }\n  String.prototype.isModifiable = function(): boolean {\n    return /^[a-zA-Z]+$/.test(this.toString())\n  }\n\n  var indentLevel: number = 0\n\n  lines.forEach((l: string, i: number) => {\n    var stringSoFar: string = ''\n    var prev: string = ''\n    l.split('').forEach((c: string, i: number) => {\n      const prev = l.split('')[i - 1]\n      if (/^\\s+$/.test(c)) {\n        if (/^\\s+$/.test(c + prev)) return;\n      }\n      if (c == '}') {\n        indentLevel--\n        return;\n      }\n      if (c == '{' && i == l.length - 1) {\n        indentLevel++\n        stringSoFar += ':'\n        return;\n      }\n      if (i == 0) stringSoFar = indent(indentLevel) + stringSoFar\n      if (c.isUpperCase()) {\n        c = '_' + c.toLowerCase()\n      }\n      if (c !== ';') stringSoFar += c\n      if (stringSoFar == 'var ') stringSoFar = ''\n      //console.log(stringSoFar)\n    })\n    if (!/^\\s+$/.test(stringSoFar)) converted += stringSoFar + '\\n'\n  })\n\n  console.log('Saved!')\n  saveFile(file.replaceAll('.pyc','')+'_converted.py', converted)\n\n  function indent(lvl: number): string {\n    var toReturn: string = ''\n    for (let i: number = 0; i < lvl; i++) {\n      toReturn += ' '\n    }\n    return toReturn;\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,gBAAoE;AACpE,eAA0B;AAE1B,MAAM,KAAK,SAAS,gBAAgB;AAAA,EAClC,OAAO,QAAQ;AAAA,EACf,QAAQ,QAAQ;AAClB,CAAC;AAED,IAAI,MAAM;AACV,GAAG,SAAS,8FAA8F,SAAS,QAAQ;AACzH,QAAM,SAAS;AACf,cAAY,GAAG;AACf,KAAG,MAAM;AACX,CAAC;AAED,SAAS,YAAY,MAAM;AACzB,QAAM,WAAe,UAAAA,cAAS,MAAM,MAAM;AAC1C,MAAI,QAAuB,KAAK,WAAW,YAAY,KAAK,EAAE,WAAW,gBAAgB,gBAAgB,EAAE,WAAW,QAAQ,MAAM,EAAE,MAAM,IAAI;AAChJ,MAAI,YAAoB;AAIxB,SAAO,UAAU,cAAc,WAAoB;AACjD,QAAI,CAAC,cAAc,KAAK,KAAK,SAAS,CAAC;AAAG,aAAO;AACjD,WAAO,KAAK,SAAS,MAAM,KAAK,YAAY;AAAA,EAC9C;AACA,SAAO,UAAU,cAAc,WAAoB;AACjD,QAAI,CAAC,cAAc,KAAK,KAAK,SAAS,CAAC;AAAG,aAAO;AACjD,WAAO,KAAK,SAAS,MAAM,KAAK,YAAY;AAAA,EAC9C;AACA,SAAO,UAAU,eAAe,WAAoB;AAClD,WAAO,cAAc,KAAK,KAAK,SAAS,CAAC;AAAA,EAC3C;AAEA,MAAI,cAAsB;AAE1B,QAAM,QAAQ,CAAC,GAAW,MAAc;AACtC,QAAI,cAAsB;AAC1B,QAAI,OAAe;AACnB,MAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,GAAWC,OAAc;AAC5C,YAAMC,QAAO,EAAE,MAAM,EAAE,EAAED,KAAI;AAC7B,UAAI,QAAQ,KAAK,CAAC,GAAG;AACnB,YAAI,QAAQ,KAAK,IAAIC,KAAI;AAAG;AAAA,MAC9B;AACA,UAAI,KAAK,KAAK;AACZ;AACA;AAAA,MACF;AACA,UAAI,KAAK,OAAOD,MAAK,EAAE,SAAS,GAAG;AACjC;AACA,uBAAe;AACf;AAAA,MACF;AACA,UAAIA,MAAK;AAAG,sBAAc,OAAO,WAAW,IAAI;AAChD,UAAI,EAAE,YAAY,GAAG;AACnB,YAAI,MAAM,EAAE,YAAY;AAAA,MAC1B;AACA,UAAI,MAAM;AAAK,uBAAe;AAC9B,UAAI,eAAe;AAAQ,sBAAc;AAAA,IAE3C,CAAC;AACD,QAAI,CAAC,QAAQ,KAAK,WAAW;AAAG,mBAAa,cAAc;AAAA,EAC7D,CAAC;AAED,UAAQ,IAAI,QAAQ;AACpB,gBAAAE,eAAS,KAAK,WAAW,QAAO,EAAE,IAAE,iBAAiB,SAAS;AAE9D,WAAS,OAAO,KAAqB;AACnC,QAAI,WAAmB;AACvB,aAAS,IAAY,GAAG,IAAI,KAAK,KAAK;AACpC,kBAAY;AAAA,IACd;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["readFile", "i", "prev", "saveFile"]
}
